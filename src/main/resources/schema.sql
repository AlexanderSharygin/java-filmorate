

CREATE TABLE IF NOT EXISTS FILMS (
	ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(50) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	RATE_ID BIGINT NOT NULL,
	CONSTRAINT CONSTRAINT_3 PRIMARY KEY (ID),
	CONSTRAINT FILMS_FK FOREIGN KEY (RATE_ID) REFERENCES RATES(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE IF NOT EXISTS FRIEND_STATUSES (
	STATUS_ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(50) NOT NULL,
	CONSTRAINT CONSTRAINT_C PRIMARY KEY (STATUS_ID)
);


CREATE TABLE  IF NOT EXISTS GENRES (
	GENRE_ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(50) NOT NULL,
	CONSTRAINT CONSTRAINT_7 PRIMARY KEY (GENRE_ID)
);

CREATE TABLE IF NOT EXISTS GENRES_FILMS (
	GENRE_ID BIGINT NOT NULL,
	FILMS_ID BIGINT NOT NULL,
	CONSTRAINT GENRES_FILMS_PK PRIMARY KEY (FILMS_ID,GENRE_ID),
	CONSTRAINT GENRES_FILMS_FK FOREIGN KEY (FILMS_ID) REFERENCES FILMS(ID) ON DELETE SET NULL ON UPDATE CASCADE,
	CONSTRAINT GENRES_FILMS_FK2 FOREIGN KEY (GENRE_ID) REFERENCES GENRES(GENRE_ID) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS LIKES (
	USER_ID BIGINT NOT NULL,
	FILM_ID BIGINT NOT NULL,
	CONSTRAINT LIKES_PK2 PRIMARY KEY (FILM_ID,USER_ID),
	CONSTRAINT LIKES_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT LIKES_FK2 FOREIGN KEY (FILM_ID) REFERENCES FILMS(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  IF NOT EXISTS RATES (
	ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(50) NOT NULL,
	CONSTRAINT CONSTRAINT_4 PRIMARY KEY (ID)
);

CREATE TABLE  IF NOT EXISTS USERS (
	USER_ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(50) NOT NULL,
	EMAIL CHARACTER VARYING(50) NOT NULL,
	BIRHDAY DATE NOT NULL,
	LOGIN CHARACTER VARYING(50) NOT NULL,
	CONSTRAINT CONSTRAINT_4D PRIMARY KEY (USER_ID)
);

CREATE TABLE IF NOT EXISTS USERS_USERS (
	USERS_ID BIGINT NOT NULL,
	FRIEND_ID BIGINT NOT NULL,
	STATUS_ID BIGINT NOT NULL,
	CONSTRAINT CONSTRAINT_A CHECK("USERS_USERS"."USERS_ID" <> "USERS_USERS"."FRIEND_ID"),
	CONSTRAINT USERS_USERS_PK2 PRIMARY KEY (USERS_ID,FRIEND_ID),
	CONSTRAINT USERS_USERS_FK FOREIGN KEY (USERS_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT USERS_USERS_FK2 FOREIGN KEY (FRIEND_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT USERS_USERS_FK3 FOREIGN KEY (STATUS_ID) REFERENCES FRIEND_STATUSES(STATUS_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_A ON USERS_USERS (USERS_ID,FRIEND_ID);
CREATE INDEX IF NOT EXISTS USERS_USERS_FK2_INDEX_A ON USERS_USERS (FRIEND_ID);
CREATE INDEX IF NOT EXISTS USERS_USERS_FK3_INDEX_A ON USERS_USERS (STATUS_ID);
CREATE INDEX IF NOT EXISTS USERS_USERS_FK_INDEX_A ON USERS_USERS (USERS_ID);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_4D ON USERS (USER_ID);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_4 ON RATES (ID);
CREATE INDEX IF NOT EXISTS LIKES_FK2_INDEX_4 ON PUBLIC.LIKES (FILM_ID);
CREATE INDEX IF NOT EXISTS LIKES_FK_INDEX_4 ON PUBLIC.LIKES (USER_ID);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_45 ON PUBLIC.LIKES (USER_ID,FILM_ID);
CREATE INDEX IF NOT EXISTS  GENRES_FILMS_FK2_INDEX_F ON PUBLIC.GENRES_FILMS (GENRE_ID);
CREATE INDEX IF NOT EXISTS  GENRES_FILMS_FK_INDEX_F ON PUBLIC.GENRES_FILMS (FILMS_ID);
CREATE UNIQUE INDEX IF NOT EXISTS  PRIMARY_KEY_F ON PUBLIC.GENRES_FILMS (GENRE_ID,FILMS_ID);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_7 ON PUBLIC.GENRES (GENRE_ID);
CREATE UNIQUE INDEX   IF NOT EXISTS PRIMARY_KEY_C ON PUBLIC.FRIEND_STATUSES (STATUS_ID);
CREATE INDEX  IF NOT EXISTS FILMS_FK_INDEX_3 ON PUBLIC.FILMS (RATE_ID);
CREATE UNIQUE INDEX  IF NOT EXISTS PRIMARY_KEY_3 ON PUBLIC.FILMS (ID);


